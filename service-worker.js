/*! For license information please see service-worker.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/service-worker.js":()=>{eval("{const CACHE_NAME = 'pwa-cache-v0.0'; // increment on each deploy\nconst urlsToCache = [\n    '/',\n    '/main.js',\n    '/main.css',\n    '/icon.png',\n    // add other static assets like CSS/images here\n];\n\n// Install: cache essential assets\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open(CACHE_NAME)\n            .then(cache => cache.addAll(urlsToCache))\n            .catch(err => console.error('Cache install failed:', err))\n    );\n\n    // Only skip waiting in production (not localhost)\n    if (self.location.hostname !== 'localhost') {\n        self.skipWaiting();\n    }\n});\n\n// Activate: clean up old caches\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        caches.keys().then(keys =>\n            Promise.all(\n                keys.filter(key => key !== CACHE_NAME).map(key => caches.delete(key))\n            )\n        )\n    );\n\n    if (self.location.hostname !== 'localhost') {\n        self.clients.claim();\n    }\n});\n\n// Fetch: network-first for HTML, cache-first for assets\nself.addEventListener('fetch', (event) => {\n    const request = event.request;\n\n    if (request.mode === 'navigate') {\n    // Network-first for HTML pages\n        event.respondWith(\n            fetch(request)\n                .then(response => {\n                    if (response && response.status === 200) {\n                        caches.open(CACHE_NAME).then(cache => cache.put(request, response.clone()));\n                    }\n                    return response;\n                })\n                .catch(() => caches.match(request).then(cached => cached || caches.match('/offline.html')))\n        );\n    } else {\n    // Cache-first for assets\n        event.respondWith(\n            caches.match(request).then(cached => cached || fetch(request))\n        );\n    }\n});\n\n\n//# sourceURL=webpack:///./src/service-worker.js?\n}")}},__webpack_exports__={};__webpack_modules__["./src/service-worker.js"]()})();